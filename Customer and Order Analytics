#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

-- 1. How many orders were placed in January? 
SELECT count(orderid) FROM BIT_DB.JanSales;

--2. How many of those orders were for an iPhone? 
SELECT count(orderid) FROM BIT_DB.JanSales WHERE Product='iPhone';

--3. Select the customers account numbers for all the orders that were placed in February.
SELECT acctnum FROM BIT_DB.customers cust INNER JOIN BIT_DB.FebSales FEB ON cust.order_id=FEB.orderID;

--4. Which product was the cheapest one sold in January, and what was the price? 
SELECT distinct Product, price FROM BIT_DB.JanSales WHERE price IN(SELECT MIN(price) FROM BIT_DB.JanSales);


--5. What is the total revenue for each product sold in January? 
--(Revenue can be calculated using the number of products sold and the price of the prodcuts). 
SELECT product, SUM(quantity)* price as revenue FROM BIT_DB.JanSales GROUP BY product;

--6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue? 
SELECT product, location, SUM(Quantity), SUM(quantity)*price as revenue FROM BIT_DB.FebSales WHERE location='548 Lincoln St, Seattle, WA 98101' 
GROUP BY product;

--7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers? 
SELECT count(cust.acctnum), avg(quantity*price) FROM BIT_DB.FebSales FEB LEFT JOIN BIT_DB.customers cust 
ON FEB.orderid=cust.order_id WHERE Feb.Quantity>2;

--8. In the SQL below we are only pulling the orderdates between 02/13/19 00:00 and 02/18/19 00:00.
SELECT orderdate FROM BIT_DB.FebSales WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

--9. In the SQL below we are only pulling the locations that have the orderdate 02/18/19 01:35.
SELECT location FROM BIT_DB.FebSales WHERE orderdate = '02/18/19 01:35';

--10. Here we are telling SQL to only select orderdate when it starts with 02/18/19, no matter the time (HH:MM) was.
SELECT sum(quantity) FROM BIT_DB.FebSales WHERE orderdate like '02/18/19%';

--11. Here we are telling SQL to only pull products that have the name "Batteries" in them. 
SELECT distinct Product FROM BIT_DB.FebSales WHERE Product like '%Batteries%';

--12. Here we are telling SQL to only pull products that have ".99" in their price.  
SELECT distinct Product, price FROM BIT_DB.FebSales WHERE price like '%.99';

--13. List all the products sold on Los Angeles in February, and include how many of each were sold. 
SELECT distinct Product, sum(quantity) FROM BIT_DB.FebSales WHERE location like '%Los Angeles%' GROUP BY Product;

--14. Which locations in New York received at least 3 orders in January, and how many orders did they each receive? 
SELECT distinct location, count(orderID) FROM BIT_DB.JanSales WHERE location like '%NY%' GROUP BY location HAVING count(orderID)>=3;

--15. How many of each type of headphone were sold in February?
SELECT Product, sum(Quantity) FROM BIT_DB.FebSales WHERE Product like '%Headphones%' GROUP BY Product;

--16. What was the average amount spent per account in February? 
SELECT  avg(Quantity*Price) FROM BIT_DB.FebSales FEB LEFT JOIN BIT_DB.customers cust ON cust.order_id=FEB.orderID;

--17. What was the average quantity of products purchased per account in February? 
SELECT sum(Quantity)/count(cust.acctnum) FROM BIT_DB.FebSales FEB LEFT JOIN BIT_DB.customers cust ON cust.order_id=FEB.orderID;

---18. Which Product brought in the most revenue in January and how much revenue did it bring in total? 
SELECT Product, sum(Quantity*price) FROM BIT_DB.JanSales GROUP BY product ORDER BY  sum(Quantity*price) desc;

